bool ispossible(int mid,vector<int>p,int n,int h){
        long long int hour=0;
        for(int i=0;i<n;i++){
            double ujj=double(double(p[i])/double(mid));
            hour+=(ceil(ujj));
            //cout<<hour;
        }
        //cout<<hour;
        if(hour<=h){
            return true;
        }
        return false;

    }
    int minEatingSpeed(vector<int>& piles, int h) {
        sort(piles.begin(),piles.end());
        int n=piles.size();
        int l=1;
        int r=piles[n-1];
        int ans=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(ispossible(mid,piles,n,h)){
                ans=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
            
        }
        return ans;
    }
