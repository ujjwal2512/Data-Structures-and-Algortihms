//bfs
private:

bool check(int s,vector<int>adj[],int vis[]){
    vis[s]=1;
    queue<pair<int,int>>q;
    q.push({s,-1});
    while(!q.empty()){
        int curr=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto j:adj[curr]){
            if(!vis[j]){
                q.push({j,curr});
                vis[j]=1;
            }else{
                if(parent!=j){
                    return true;
                }
            }
        }
    }
    return false;
}
    
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int vis[V]={0};
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(check(i,adj,vis)) return true;
            }
        }
        return false;
        
        
        
    }


